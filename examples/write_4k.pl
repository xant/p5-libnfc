#!/usr/bin/perl

use Data::Dumper;
use Libnfc::Reader;
use Libnfc::Constants;
use Libnfc qw(print_hex);

my $outfile = "./dump.out";
my @keys = (
    # default keys
    pack("C6", 0x00,0x00,0x00,0x00,0x00,0x00),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),
    pack("C6", 0xb5,0xff,0x67,0xcb,0xa9,0x51),

# my card-specific keys
    [ pack("C6", 0x8b, 0x68, 0x44, 0x79, 0x2f, 0x8b),
      pack("C6", 0xa9, 0x7e, 0xbe, 0xcc, 0x96, 0xba) ],

    [ pack("C6", 0x51, 0x01, 0x4c, 0x30, 0xd8, 0xcb),
      pack("C6", 0x04, 0x86, 0x64, 0xfd, 0xca, 0x18) ],

    [ pack("C6", 0xe8, 0x7a, 0xf9, 0x04, 0x45, 0x54),
      pack("C6", 0x80, 0x52, 0xd2, 0x6a, 0xb1, 0xd4) ],

    [ pack("C6", 0xf2, 0x0d, 0x46, 0x63, 0xa3, 0xde),
      pack("C6", 0x11, 0xa8, 0x73, 0x54, 0x93, 0xd1) ],

    [ pack("C6", 0x11, 0x6f, 0x45, 0x0e, 0xdb, 0x8d),
      pack("C6", 0xf6, 0x96, 0x45, 0x43, 0x16, 0x49) ],

    [ pack("C6", 0x0d, 0xbb, 0xc4, 0x9a, 0x38, 0x93),
      pack("C6", 0xae, 0xc4, 0xd8, 0xa0, 0x0a, 0xc9) ],

    [ pack("C6", 0x01, 0x45, 0xc3, 0x2d, 0x53, 0x58),
      pack("C6", 0xe7, 0x75, 0x37, 0x98, 0xbc, 0xd1) ],

    [ pack("C6", 0x9e, 0x46, 0xc5, 0x7e, 0x85, 0x9e),
      pack("C6", 0x82, 0x7e, 0x21, 0x01, 0x13, 0xb5) ],

    [ pack("C6", 0x05, 0xef, 0x96, 0x4b, 0x67, 0x22),
      pack("C6", 0xe6, 0x5a, 0x00, 0xdf, 0x49, 0xfb) ],

    [ pack("C6", 0xa8, 0x30, 0x3f, 0xcd, 0xc4, 0xe5),
      pack("C6", 0xfe, 0x06, 0xb5, 0x0f, 0x34, 0x2d) ],

    [ pack("C6", 0x8c, 0x12, 0x06, 0xef, 0xa0, 0x34),
      pack("C6", 0x40, 0x12, 0x86, 0xda, 0x3c, 0x8e) ],

    [ pack("C6", 0xdc, 0x00, 0x37, 0xc0, 0x8d, 0xa1),
      pack("C6", 0x7b, 0x79, 0x07, 0x41, 0x7e, 0x1f) ],

    [ pack("C6", 0x58, 0xa2, 0x3d, 0x2c, 0xc4, 0x76),
      pack("C6", 0xaf, 0x4a, 0x17, 0x8a, 0x63, 0x81) ],

    [ pack("C6", 0x82, 0xbd, 0x85, 0x2a, 0x19, 0x28),
      pack("C6", 0x46, 0x2d, 0x07, 0xb6, 0x6a, 0xe5) ],

    [ pack("C6", 0x92, 0xe1, 0x86, 0xd8, 0x41, 0x4a),
      pack("C6", 0x93, 0xa1, 0xb1 ,0xcc, 0xe4, 0xe2) ],

    [ pack("C6", 0x54, 0xb9, 0x2d, 0x8e, 0x6c, 0x36),
      pack("C6", 0xc7, 0xb0, 0xcd, 0xcf, 0xe6, 0x38) ],

    [ pack("C6", 0xef, 0xbd, 0xa0, 0x31, 0xb1, 0x0d),
      pack("C6", 0xda, 0xb5, 0x9d, 0x71, 0x98, 0xd0) ],

    [ pack("C6", 0x0c, 0xb0, 0x22, 0x44, 0x8d, 0xcf),
      pack("C6", 0x76, 0x85, 0xc9, 0x93, 0xba, 0x11) ],

# XXXX - extra B key ??? 


#    pack("C6", 0x90,0xc6,0x79,0x18,0x58,0x0d),
#    pack("C6", 0x54,0x6b,0xba,0xb7,0xf9,0x5a),
#    pack("C6", 0x51,0x1b,0x2b,0x9c,0x81,0x68),
#    pack("C6", 0x9f,0x1c,0xa1,0xec,0x74,0x90),
#    pack("C6", 0xe4,0xf3,0x6b,0x87,0xac,0x0a),
#    pack("C6", 0xf4,0xc9,0x85,0xe8,0xf9,0xe6),
#    pack("C6", 0xb6,0xba,0x3d,0x8c,0x0a,0x3b),
#    pack("C6", 0x7a,0x99,0x16,0x32,0x4e,0x3f),
#    pack("C6", 0xdc,0x0e,0x75,0x74,0xa0,0xd8),
#    pack("C6", 0xc5,0x64,0x13,0x29,0x8b,0x50),
#    pack("C6", 0x9a,0xd7,0x31,0xe7,0xd1,0xed),
#    pack("C6", 0x46,0xea,0xa2,0xe5,0xbf,0x52),
#    pack("C6", 0x2f,0xa7,0x71,0xb6,0x4a,0xe8),
#    pack("C6", 0x5b,0x4a,0xfb,0xf6,0xe0,0xa5),
#    pack("C6", 0x34,0x83,0xf4,0xa2,0x52,0x65),
#    pack("C6", 0xdc,0x44,0xd3,0x60,0x7b,0x0f),
#    pack("C6", 0x07,0xa3,0xc2,0x58,0xf9,0x4f),
#    pack("C6", 0x2f,0x85,0x74,0xeb,0x86,0x3d)
);

sub usage {
    printf("%s block_num\nWill fetch 16 bytes from stdin", $0);
    exit -1;
}

my $r = Libnfc::Reader->new(debug => 1);
if ($r->init()) {
    printf ("Reader: %s\n", $r->name);
    my $tag = $r->connect(IM_ISO14443A_106);

    if ($tag) {
        $tag->dump_info;
    } else {
        warn "No TAG";
        exit -1;
    }

    my $input;
    read(STDIN, $input, 16);
    printf("INPUT: ") and print_hex($input, 16);

    $tag->set_keys(@keys);

    $tag->select;

    my $block = $ARGV[0];
    die "bad block num $block. Must be between 0 and ". $tag->blocks
        unless ($block =~ /^\d+$/ and $block < $tag->blocks);
    my $sector = $tag->block2sector($block);
    my $acl = $tag->acl($sector);
    warn Data::Dumper->Dump([$acl], ["ACL"]);
    my $data = $tag->read_block($block);
    print "Old data: " and print_hex($data, length($data));
    $tag->write_block(240, pack("a16", $input));
    my $data = $tag->read_block($block);
    print "New data: " and print_hex($data, length($data));

}

